#!/usr/bin/env python3

import datetime
import hashlib
import json
import os
import re
import shutil
import subprocess
import sys
import urllib.request

PACKAGE_PATTERN = re.compile(r'^(Package|Version): (.*)$', re.MULTILINE)

# packages_path = os.environ['HOME'] + '/src/termux-packages'
# if not os.path.isdir(packages_path): sys.exit(packages_path + '" does not exist')
supported_arches = ['aarch64']

for arch in supported_arches:
    name_to_local_version = {}
    proc = subprocess.Popen(['./scripts/list-versions.sh'],stdout=subprocess.PIPE)
    for line in proc.stdout:
        line = line.decode('utf-8').strip()
        [pkg_name, version] = line.split("=")
        name_to_local_version[pkg_name] = version

    url = f'https://termux.net/dists/stable/main/binary-{arch}/Packages'
    arch_package_file = urllib.request.urlopen(url)
    arch_package_str = arch_package_file.read().decode('utf-8')

    remote_packages = set()
    reported_packages = set()
    current_package = None
    for m in re.finditer(PACKAGE_PATTERN, arch_package_str):
        if m.group(1) == 'Package':
            current_package = m.group(2)
            remote_packages.add(current_package)
            if current_package.endswith('-static') and current_package not in name_to_local_version:
                current_package = current_package.removesuffix('-static')
        else:
            remote_version = m.group(2)
            if current_package not in name_to_local_version:
                print(f"{current_package} Delete - published package not in local")
            else:
                local_version = name_to_local_version[current_package]
                if local_version != remote_version and current_package not in reported_packages:
                    print(f'{current_package} Version mismatch - local={local_version}, remote={remote_version}')
                    reported_packages.add(current_package)

    if name_to_local_version:
        for pkg in name_to_local_version.keys():
            if not pkg in remote_packages:
                print(f"{pkg} Package exists locally but is not published")
