diff -u -r ../go/src/os/exec_posix.go ./src/os/exec_posix.go
--- ../go/src/os/exec_posix.go	2024-06-27 20:11:12.000000000 +0000
+++ ./src/os/exec_posix.go	2024-07-25 00:22:18.011639555 +0000
@@ -11,6 +11,7 @@
 	"internal/syscall/execenv"
 	"runtime"
 	"syscall"
+	"strings"
 )
 
 // The only signal values guaranteed to be present in the os package on all
@@ -23,6 +24,36 @@
 	Kill      Signal = syscall.SIGKILL
 )
 
+func getAndroidLinker() string {
+	if runtime.GOARCH == "arm" || runtime.GOARCH == "386" {
+		return "/system/bin/linker"
+	} else {
+		return "/system/bin/linker64"
+	}
+}
+
+func setTermuxSelfExe(sysattr *syscall.ProcAttr, selfExe string) {
+    for i, v := range sysattr.Env {
+	if strings.HasPrefix(v, "TERMUX_EXEC__PROC_SELF_EXE=") {
+		// Stdout.WriteString("FOUND EXISTING ENV: " + v)
+		sysattr.Env[i] = "TERMUX_EXEC__PROC_SELF_EXE=" + selfExe
+		// Stdout.WriteString("NEW ENV: " + sysattr.Env[i])
+		return
+	}
+    }
+    sysattr.Env = append(sysattr.Env, "TERMUX_EXEC__PROC_SELF_EXE=" + selfExe)
+}
+
+func rewriteExecutablePath(origPath string) string {
+	if strings.HasPrefix(origPath, "/bin/") {
+		return "/data/data/com.termux/files/usr" + origPath
+	} else if strings.HasPrefix(origPath, "/usr/bin/") {
+		return "/data/data/com.termux/files" + origPath
+	} else {
+		return origPath
+	}
+}
+
 func startProcess(name string, argv []string, attr *ProcAttr) (p *Process, err error) {
 	// If there is no SysProcAttr (ie. no Chroot or changed
 	// UID/GID), double-check existence of the directory we want
@@ -51,6 +82,74 @@
 		sysattr.Files = append(sysattr.Files, f.Fd())
 	}
 
+	if runtime.GOOS == "android" {
+		// Stdout.WriteString("initial name is: " + name + "\n")
+		name = rewriteExecutablePath(name)
+		// Stdout.WriteString("Rewritten name is: " + name + "\n")
+
+		fileToExecute, err := Open(name)
+		if err != nil {
+		    // Stdout.WriteString("ERROR opening file\n")
+		    return nil, err
+		}
+		defer fileToExecute.Close()
+		var header [256]byte
+		n, err := fileToExecute.read(header[:])
+		if err != nil {
+		    // Stdout.WriteString("ERROR ReadFull\n")
+		    return nil, err
+		}
+		if n > 20 && header[0] == 127 && header[1] == 'E' && header[2] == 'L' && header[3] == 'F' {
+		    // Stdout.WriteString("THIS LOOKS LIKE A ELF FILE. linker=" + getAndroidLinker() + "\n")
+		    // Stdout.WriteString("orig argv[0] = '" + argv[0] + "'\n")
+		    setTermuxSelfExe(sysattr, name)
+		    argv = append([]string{argv[0]}, argv...)
+		    argv[1] = name
+		    name = getAndroidLinker()
+		} else if n > 1 && header[0] == '#' && header[1] == '!' {
+		    interpreterStartIdx := -1
+		    interpreterArgsStartIdx := -1
+		    newlineIdx := -1
+		    for i := 2; i <= n; i++ {
+			if interpreterStartIdx == -1 && header[i] != ' ' {
+				interpreterStartIdx = i
+			} else if interpreterArgsStartIdx == -1 && interpreterStartIdx != -1 && header[i] == ' ' {
+				interpreterArgsStartIdx = i
+			}
+			if header[i] == '\n' {
+				newlineIdx = i
+				break
+			}
+		    }
+		    if newlineIdx == -1 {
+		    	// Stdout.WriteString("newlineIdx = -1\n")
+		    } else if interpreterStartIdx == -1 {
+		    	// Stdout.WriteString("interpreterStartIdx = -1\n")
+		    } else {
+			interpreterPathEndIdx := newlineIdx
+			if interpreterArgsStartIdx != -1 {
+				interpreterPathEndIdx = interpreterArgsStartIdx
+			}
+			interpreterPath := rewriteExecutablePath(string(header[interpreterStartIdx:interpreterPathEndIdx]))
+		        setTermuxSelfExe(sysattr, interpreterPath)
+			// Stdout.WriteString("interpreterPath = '" + string(interpreterPath) + "'\n")
+			toPrepend := []string{argv[0], interpreterPath}
+			if interpreterArgsStartIdx != -1 {
+				interpreterArgs := strings.Trim(string(header[interpreterArgsStartIdx:newlineIdx]), " ")
+				// Stdout.WriteString("interpreterArgs = '" + interpreterArgs + "'\n")
+				toPrepend = append(toPrepend, interpreterArgs)
+			}
+			// Stdout.WriteString("orig argv[0] = '" + argv[0] + "'\n")
+		        argv = append(toPrepend, argv...)
+			// Stdout.WriteString("new argv[0] = '" + argv[0] + "'\n")
+			// Stdout.WriteString("new argv[1] = '" + argv[1] + "'\n")
+			// Stdout.WriteString("new argv[2] = '" + argv[2] + "'\n")
+			name = getAndroidLinker()
+		    }
+		}
+		// Stdout.WriteString("new name is: " + name + "\n")
+	}
+
 	pid, h, e := syscall.StartProcess(name, argv, sysattr)
 
 	// Make sure we don't run the finalizers of attr.Files.
